import { prefixPluginTranslations } from '@strapi/helper-plugin';
import pluginPkg from '../../package.json';
import pluginId from './pluginId';
import Initializer from './components/Initializer';
import PluginIcon from './components/PluginIcon';

const name = pluginPkg.strapi.name;

export default {
  register(app) {
    app.addMenuLink({
      to: `/plugins/${pluginId}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: name,
      },
      Component: async () => {
        const component = await import(/* webpackChunkName: "[request]" */ './pages/App');

        return component;
      },
      permissions: [
        // Uncomment to set the permissions of the plugin here
        // {
        //   action: '', // the action name should be plugin::plugin-name.actionType
        //   subject: null,
        // },
      ],
    });

    app.customFields.register({
      name: "slug",
      pluginId: "slug",
      type: "string",
      intlLabel: {
        id: "slug.form.label",
        defaultMessage: "Slug Custom Field",
      },
      intlDescription: {
        id: "slug.form.description",
        defaultMessage: "Autogenerated Custom Slug",
      },
      icon: PluginIcon,
      components: {
        Input: async () =>
          import(
            /* webpackChunkName: "input-component" */ "./components/Input"
          ),
      },
      options: {
        base: [
          {
            sectionTitle: {
              id: 'slug.form.kw',
              defaultMessage: 'Default Value',
            },
            items: [ // Add settings items to the section
              {
                intlLabel: {
                  id: 'slug.form.kw.label',
                  defaultMessage: 'Change Key Word inside the placeholder',
                },
                name: 'options.kw',
                type: 'string'
              },
            ]
          },
          {
            sectionTitle: {
              id: 'slug.form.pattern',
              defaultMessage: 'Slug Pattern',
            },
            items: [ // Add settings items to the section
              {
                intlLabel: {
                  id: 'slug.form.pattern.label',
                  defaultMessage: 'Create a slug pattern'
                },
                name: 'options.pattern',
                type: 'select',
                options: [
                  {
                    key: 'title',
                    value: 'title',
                    metadatas: {
                      intlLabel: {
                        id: 'slug.form.pattern.title',
                        defaultMessage: 'title',
                      },
                    },
                  },
                  {
                    key: 'id',
                    value: 'id',
                    metadatas: {
                      intlLabel: {
                        id: 'slug.form.pattern.id',
                        defaultMessage: 'id',
                      },
                    },
                  },
                  {
                    key: 'datetime',
                    value: 'datetime',
                    metadatas: {
                      intlLabel: {
                        id: 'slug.form.pattern.datetime',
                        defaultMessage: 'datetime',
                      },
                    },
                  },

                ],
              },
            ]
          }
        
        ],
      }
    });

    app.registerPlugin({
      id: pluginId,
      initializer: Initializer,
      isReady: false,
      name,
    });
  },

  bootstrap(app) {},
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return import(
          /* webpackChunkName: "translation-[request]" */ `./translations/${locale}.json`
        )
          .then(({ default: data }) => {
            return {
              data: prefixPluginTranslations(data, pluginId),
              locale,
            };
          })
          .catch(() => {
            return {
              data: {},
              locale,
            };
          });
      })
    );

    return Promise.resolve(importedTrads);
  },
};
